# PART 4: MALWARE ANALYSIS
# You will perform analysis on a ﬁle (part4.file). 
# To aid in your analysis, the part4.yara file contains some Yara rules.

# 4.1 import yara and pefile after installing them with pip
# yara installed using pip install yara-python
# pefile installed using pip install pefile

# import necessary modules
import yara
import pefile

# 4.2 Use yara rules to determine file type

def match_yara(file_path, rule_path): 
    rule = yara.compile(rule_path) # compile the rule
    matches = rule.match(file_path) # match the rule with the file
    for m in matches:               # print the results
        print(" [!] :", m.rule)     # print the rule name

match_yara("part4.file","part4.yara") # call the function

# type of file: PE (portable executable) file

# 4.3 Check for imports in the file; record number of DLLs and functions
 
def get_imports(path):  # get imports
    try:
        pe = pefile.PE(path) # create PE object
        pe.parse_data_directories() # parse data directories
        total_functions = 0
        for entry in pe.DIRECTORY_ENTRY_IMPORT: # iterate through imports
            total_functions += len(entry.imports) # count total number of functions
        print("{0:>20} | dlls: {1:3} functions: {2:3}".format( # print file name, # of DLLs, # of functions
            path,
            len(pe.DIRECTORY_ENTRY_IMPORT),
            total_functions
        ))
    except:
        print("[!] Err: Invalid PE")

# Number of imported DLLs: 2
# Total number of imported functions: 70        

# 4.4 Analyze sections; record section names and permissions    

def analyze_sections(path): # analyze sections
    try:
        pe = pefile.PE(path) # create PE object
        print(f"File: {path}") # print file name
        for section in pe.sections: # iterate through sections
            section_name = section.Name.decode().rstrip("\x00") # get section name  
            flags = get_flags(section) # get section permissions
            print(f"Section: {section_name} | Permissions: {flags}") # print section name and permissions

    except Exception as e:
        print(f"[!] Error: {e}")

def get_flags(section): # get section permissions
    flags = ""
    if section.Characteristics & 0x40000000: # check for read permissions
        flags += "R"
    if section.Characteristics & 0x80000000: # check for write permissions
        flags += "W"
    if section.Characteristics & 0x20000000: # check for execute permissions
        flags += "X"
    return flags

# section names and permissions of part4.file:

# Section: .text | Permissions: RWX
# Section: .rdata | Permissions: RWX
# Section: .data | Permissions: RWX
# Section: .reloc | Permissions: RWX

file_path = "part4.file" # call functions
get_imports(file_path) 
analyze_sections(file_path)

# 4.5 Findings (Three things that make this file suspicious):

# 1. The file is a PE (portable executable) file; a type of packed executable. 
#    This isn't what was expected. Packed executables are often used by malware authors.
# 2. The file has a low number of imported DLLs and imported functions.
#    This may indicate that the file is attempting to hide its imports to avoid detection.    
# 3. The file appears to have executable sections (X permissions).
#    The file may contain code that can be executed; a common characteristic of malware.